<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arda Taksi</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f4f8;
            margin: 0;
            padding: 0;
            color: #333;
            line-height: 1.6;
            /* Okunabilirliği artırır */
        }

        header {
            background: #35424a;
            color: #ffffff;
            padding: 20px 0;
            /* Üst ve alttan boşluk, yanlardan boşluk yok */
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        nav ul li {
            display: inline-block;
            /* Inline-block ile daha esnek yatay sıralama */
            margin: 0 10px;
            /* Yatay boşlukları azaltıyoruz */
        }

        nav ul li a {
            color: #ffffff;
            text-decoration: none;
            padding: 8px 15px;
            border-radius: 5px;
            transition: background 0.3s;
            display: block;
            /* Tüm link alanını tıklanabilir yapar */
        }

        nav ul li a:hover {
            background: #e8491d;
        }

        .flex-container {
            display: flex;
            flex-wrap: wrap;
            /* Küçük ekranlarda alt alta geçmesini sağlar */
            justify-content: center;
            /* Öğeleri merkezler */
            gap: 20px;
            /* Flex öğeleri arasında boşluk */
            margin: 20px auto;
            /* Üst ve alttan boşluk, yanlardan otomatik (merkezleme) */
            max-width: 1200px;
            /* Maksimum genişlik belirleyerek çok geniş ekranlarda dağılmasını engeller */
            padding: 0 20px;
            /* Yanlardan padding ekleyerek içeriğin kenarlara yapışmasını engeller */
        }

        .container1,
        .container2,
        .update-limit {
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            padding: 20px;
            box-sizing: border-box;
            /* Padding'in genişliğe dahil olmasını sağlar */
            flex: 1 1 300px;
            /* Esnek büyüme ve küçülme, minimum genişlik 300px */
            max-width: 100%;
            /* Kendi içinde maksimum genişlik */
        }

        .container1 {
            flex-basis: 500px;
            /* Tercih edilen başlangıç genişliği */
            max-width: 100%;
            /* Küçük ekranlarda 100% genişlik */
        }

        .container2 {
            flex-basis: 300px;
            /* Tercih edilen başlangıç genişliği */
            max-width: 100%;
            /* Küçük ekranlarda 100% genişlik */
        }

        .update-limit {
            flex-basis: 300px;
            /* Tercih edilen başlangıç genişliği */
            max-width: 100%;
            /* Küçük ekranlarda 100% genişlik */
            margin-top: 0;
            /* Flex container içindeyken üst boşluğa gerek yok */
        }


        h2,
        h3 {
            color: #35424a;
            text-align: center;
            /* Başlıkları merkezler */
            margin-top: 0;
            /* Üst boşluğu kaldırır */
        }

        .order-item {
            border: 1px solid #e8491d;
            margin-bottom: 15px;
            padding: 15px;
            border-radius: 5px;
            background-color: #f9f9f9;
            transition: background 0.3s;
            word-wrap: break-word;
            /* Uzun kelimelerin satır atlamasını sağlar */
        }

        .order-item:hover {
            background-color: #f1f1f1;
        }

        #orderList {
            height: 350px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #dddddd;
            border-radius: 5px;
            background-color: #ffffff;
        }

        .order-item p {
            margin: 5px 0;
        }

        #driverList {
            height: 250px;
            overflow-y: auto;
            /* Scroll yerine auto kullanmak daha iyidir */
            border: 1px solid #e8491d;
            padding: 10px;
            background-color: #ffffff;
            /* Arka plan rengi eklenmiş */
        }

        .update-limit label {
            display: block;
            margin: 10px 0 5px;
        }

        .update-limit input[type="number"],
        .update-limit select {
            width: 100%;
            /* Genişliği %100 yapar */
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            /* Padding'in genişliğe dahil olmasını sağlar */
        }

        #updateLimitButton {
            background: #e8491d;
            color: #ffffff;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
            width: 100%;
            /* Genişliği %100 yapar */
        }

        #updateLimitButton:hover {
            background: #d7361b;
        }

        footer {
            text-align: center;
            padding: 20px;
            background: #35424a;
            color: #ffffff;
            /* position: relative; /* Fixed yerine relative kullanmak daha iyi olabilir */
            */
            /* bottom: 0; */
            width: 100%;
            margin-top: 30px;
            /* Flex container ile footer arasına boşluk */
        }

        footer p {
            margin: 0;
        }

        .driver-item {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            padding-bottom: 5px;
            /* Alt çizgi için boşluk */
            border-bottom: 1px dashed #eee;
            /* Ayırıcı çizgi */
        }

        .driver-item:last-child {
            border-bottom: none;
            /* Son öğede çizgi olmasın */
        }

        /* Medya Sorguları */
        @media (max-width: 768px) {
            nav ul li {
                display: block;
                /* Küçük ekranlarda menü öğeleri alt alta */
                margin: 10px 0;
                /* Dikey boşluk ekle */
            }

            nav ul {
                padding: 10px 0;
                /* Menüye üst/alt padding ekle */
            }

            .flex-container {
                flex-direction: column;
                /* Öğeleri dikey olarak sırala */
                align-items: center;
                /* Öğeleri merkezle */
                padding: 0 10px;
                /* Yan padding'i azalt */
            }

            .container1,
            .container2,
            .update-limit {
                flex-basis: auto;
                /* Otomatik boyutlandırma */
                width: 100%;
                /* Tam genişlik kullan */
                margin-bottom: 20px;
                /* Alt boşluk ekle */
            }

            .update-limit {
                margin-top: 0;
                /* Flex container içindeyken üst boşluğa gerek yok */
            }
        }

        @media (max-width: 480px) {
            header h1 {
                font-size: 1.8em;
                /* Başlık boyutunu küçült */
            }

            nav ul li a {
                padding: 8px 10px;
                /* Menü link padding'ini küçült */
            }

            .container1,
            .container2,
            .update-limit {
                padding: 15px;
                /* Container padding'ini küçült */
            }

            .order-item,
            #driverList {
                padding: 10px;
                /* Liste öğelerinin padding'ini küçült */
            }

            footer {
                padding: 15px;
                /* Footer padding'ini küçült */
            }
        }
    </style>

</head>

<body>
    <header>
        <h1>Arda Taksi</h1>
        <nav>
            <ul>
                <li><a href="/register/driver">Sürücü Qeydiyyat</a></li>
                <li><a href="/order/taxi">Taksi Sifarişi Ver</a></li>
                <li><a href="/add-coordinates">Koordinat Əlavə Et</a></li> <!-- Buraya eklendi -->
                <li><a href="/api/help">Müştəri Mesajları</a></li> <!-- Buraya eklendi -->
            </ul>
        </nav>
    </header>

    <div class="flex-container">
        <div class="container1">
            <h2>Ofis Sifarişləri</h2>
            <div id="orderList"></div>
        </div>

        <div class="container2">
            <h2>Sürücülərin Balansı</h2>
            <div class="driver-list" id="driverList">
                <!-- Sürücü listesi burada yüklenecek -->
            </div>
        </div>

        <div class="container update-limit">
            <h3>Balansı Yenilə</h3>
            <label for="driverSelect">Sürücü Seçin:</label>
            <select id="driverSelect" onchange="loadDriverLimit()">
                <option value="">Bir sürücü seçin</option>
            </select>
            <label for="newLimit">Yeni Balans:</label>
            <input type="number" id="newLimit" required>
            <button id="updateLimitButton" onclick="updateLimit()">Yenilə</button>
        </div>
    </div>


    <footer>
        <p>© Arda Taksi</p>
    </footer>

    <script>
        async function fetchUserOrders() {
            const userId = '680208c697715af83884bf47';
            const response = await fetch(`/api/taxis/userRequests/${userId}`);

            if (response.ok) {
                const orders = await response.json();
                const orderList = document.getElementById('orderList');

                if (orders.length === 0) {
                    orderList.innerHTML = '<p>Bu kullanıcıya ait sipariş bulunamadı.</p>';
                } else {
                    orders.forEach(order => {
                        const orderItem = document.createElement('div');
                        orderItem.className = 'order-item';
                        orderItem.innerHTML = `
                            <p><strong>Müştəri Adresi:</strong> ${order.currentAddress.text}</p>
                            <p><strong>Gediləcək Adres:</strong> ${order.destinationAddress.text}</p>
                            <p><strong>Gediləcək Adres:</strong> ${order.destination2.text}</p>
                            <p><strong>Əlavə məlumat:</strong> ${order.additionalInfo || 'Yok'}</p>
                            <p><strong>Qiymət:</strong> ${order.price.toFixed(2)} ₼</p>
                            <p><strong>Qəbul :</strong> ${order.isConfirmed ? 'Edildi' : 'Edilməmiş'}</p>
                            <br>
                            ${order.driverDetails ? `
                                <p><strong>Təsdiqləyən Sürücü:</strong> ${order.driverDetails.firstName}</p>
                                <p><strong>Maşın nömrəsi:</strong> ${order.driverDetails.carPlate}</p>
                                <p><strong>Şofer tel no:</strong> ${order.driverDetails.phone}</p>
                            ` : ''}
                        `;
                        orderList.appendChild(orderItem);
                    });
                }
            } else {
                const errorMessage = await response.json();
                document.getElementById('orderList').innerHTML = `<p>${errorMessage.message}</p>`;
            }
        }

        document.addEventListener('DOMContentLoaded', fetchUserOrders);

        let driversData = [];

        async function fetchDrivers() {
            const response = await fetch('/api/drivers/get-drivers');
            if (response.ok) {
                driversData = await response.json();
                const driverList = document.getElementById('driverList');
                const driverSelect = document.getElementById('driverSelect');
                driverList.innerHTML = ''; // Önceki listeyi temizle
                driverSelect.innerHTML = ''; // Seçenekleri temizle

                driversData.forEach(driver => {
                    const driverItem = document.createElement('div');

                    driverItem.className = 'driver-item';
                    driverItem.innerHTML = `
                <span><strong>${driver.firstName} ${driver.lastName}</strong></span>
                <span>Balans: <span class="limit">${driver.limit !== null ? driver.limit : '0'} ₼</span></span>
            `;
                    driverList.appendChild(driverItem);

                    const option = document.createElement('option');
                    option.value = driver._id; // Doğru ID'yi alıyor mu kontrol edin
                    option.textContent = `${driver.firstName} ${driver.lastName}`;
                    driverSelect.appendChild(option);
                });
            } else {
                console.error('Sürücüler alınırken hata oluştu.');
            }
        }

        document.addEventListener('DOMContentLoaded', fetchDrivers);

        function loadDriverLimit() {
            const selectedDriverId = document.getElementById('driverSelect').value;
            const selectedDriver = driversData.find(driver => driver._id === selectedDriverId);

            if (selectedDriver) {
                document.getElementById('newLimit').value = selectedDriver.limit; // Seçilen sürücünün limitini yükle
            } else {
                document.getElementById('newLimit').value = ''; // Temizle
            }
        }

        async function updateLimit() {
            const selectedDriverId = document.getElementById('driverSelect').value;
            const newLimit = document.getElementById('newLimit').value;

            if (!selectedDriverId) {
                alert('Lütfen bir sürücü seçin.');
                return;
            }

            const numericNewLimit = parseFloat(newLimit);
            if (isNaN(numericNewLimit) || numericNewLimit <= 0) {
                alert('Lütfen geçerli bir limit değeri girin.');
                return;
            }

            const response = await fetch(`/api/drivers/${selectedDriverId}/updateLimit`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ limit: numericNewLimit }),
            });

            if (response.ok) {
                alert('Limit başarıyla güncellendi!');
                fetchDrivers();
            } else {
                const errorData = await response.json();
                alert(`Limit güncellenirken hata oluştu: ${errorData.msg}`);
            }
        }
    </script>

</body>

</html>